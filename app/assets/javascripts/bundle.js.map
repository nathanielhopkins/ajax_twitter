{"version":3,"sources":["./frontend/api_util.js","./frontend/follow_toggle.js","./frontend/infinite_tweets.js","./frontend/tweet_compose.js","./frontend/users-search.js","../solution/frontend/api_util.js","../solution/frontend/follow_toggle.js","webpack/bootstrap","./frontend/twitter.js"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,cAAc,GAAG,mBAAO,CAAC,0EAAkC;;AAElE;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,GAAG;AACxB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,yB;;;;;;;;;;AC5CA,cAAc,mBAAO,CAAC,0CAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;;AC1DA,gBAAgB,mBAAO,CAAC,0EAAkC;;AAE1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB;;AAEhB;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,sB;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,gBAAgB,KAAK,sBAAsB;AACrE;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,cAAc,KAAK,oBAAoB;AACpE,eAAe,iBAAiB;AAChC;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gC;;;;;;;;;;ACrEA,cAAc,mBAAO,CAAC,0CAAY;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,QAAQ,IAAI,cAAc;AAClD;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,yDAAyD,SAAS;;AAElE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8B;;;;;;;;;;AC3EA,qBAAqB,mBAAO,CAAC,oFAAuC;AACpE,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;;AAEA,gDAAgD,UAAU,KAAK,gBAAgB;AAC/E;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;;;;ACxCA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,GAAG;AACxB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;;;;;AC1CA,gBAAgB,mBAAO,CAAC,oDAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;UCzDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,mBAAmB,mBAAO,CAAC,oDAAiB;AAC5C,mBAAmB,mBAAO,CAAC,oDAAiB;AAC5C,kBAAkB,mBAAO,CAAC,kDAAgB;AAC1C,mBAAmB,mBAAO,CAAC,wDAAmB;AAC9C,gBAAgB,mBAAO,CAAC,0EAAkC;;AAE1D;AACA,kEAAkE;AAClE;AACA;AACA;AACA,CAAC,E","file":"bundle.js","sourcesContent":["const { createTweet } = require(\"../../solution/frontend/api_util\");\n\nconst APIUtil = {\n\n  followUser: id => APIUtil.changeFollowStatus(id, 'POST'),\n\n  unfollowUser: id => APIUtil.changeFollowStatus(id, 'DELETE'),\n\n  changeFollowStatus: (id, method) => (\n    $.ajax({\n      url: `/users/${id}/follow`,\n      dataType: 'json',\n      method\n    })\n  ),\n\n  searchUsers: query => (\n    $.ajax({\n      url: '/users/search',\n      dataType: 'json',\n      method: 'GET',\n      data: { query }\n    })\n  ),\n\n  createTweet: form => (\n    $.ajax({\n      url: '/tweets',\n      dataType: 'json',\n      method: 'POST',\n      data: form\n    })\n  ),\n\n  fetchTweets: data => (\n    $.ajax({\n      url: '/feed',\n      dataType: 'json',\n      method: 'GET',\n      data\n    })\n  )\n}\n\nmodule.exports = APIUtil;","let APIUtil = require(\"./api_util\");\n\nclass FollowToggle {\n  constructor($el, options) {\n    this.$el = $($el);\n    this.userId = this.$el.data(\"user-id\") || options.userId;\n    this.followState = (this.$el.data(\"initial-follow-state\") || options.followState);\n    this.render();\n    this.$el.on(\"click\", (e)=>{\n      this.handleClick(e);\n    });\n  }\n\n  render() {\n    switch(this.followState) {\n      case 'followed':\n        this.$el.prop(\"disabled\", false);\n        this.$el.html(\"Unfollow!\");\n        break;\n      case 'unfollowed':\n        this.$el.prop(\"disabled\", false);\n        this.$el.html(\"Follow!\");\n        break;\n      case 'following':\n        this.$el.prop(\"disabled\", true);\n        this.$el.html(\"Following...\");\n        break;\n      case 'unfollowing':\n        this.$el.prop(\"disabled\", true);\n        this.$el.html(\"Unfollowing...\");\n        break;\n    }\n  }\n\n  handleClick(e) {\n    e.preventDefault;\n    if(this.followState === \"unfollowed\") {\n      this.followState = \"following\";\n      this.render();\n      APIUtil.followUser(this.userId).then(() => this.followSuccess());\n    } else if (this.followState === \"followed\") {\n      this.followState = \"unfollowing\";\n      this.render();\n      APIUtil.unfollowUser(this.userId).then(() => this.unfollowSuccess());\n    }\n  }\n\n  followSuccess() {\n    this.followState = \"followed\";\n    this.render();\n  }\n\n  unfollowSuccess() {\n    this.followState = \"unfollowed\";\n    this.render();\n  }\n}\n\nmodule.exports = FollowToggle;","const APIUtil = require(\"../../solution/frontend/api_util\");\n\nclass InfiniteTweets {\n  constructor($el) {\n    this.$el = $($el);\n    this.feed = this.$el.find('#feed');\n    this.lastCreatedAt = null;\n    this.fetchTweets();\n\n    this.$el.on('click',\".fetch-more\", this.fetchTweets.bind(this));\n    this.$el.on('insert-tweet', this.insertTweet.bind(this));\n  }\n\n  fetchTweets(e) {\n    // e.preventDefault();\n    \n    let infiniteTweets = this;\n    let data = {limit: 10}\n\n    if (this.lastCreatedAt) data.max_created_at = this.lastCreatedAt;\n\n    APIUtil.fetchTweets(data).then((data) => {\n      infiniteTweets.insertTweets(data);\n\n\n      if (data.length < 10) {\n        infiniteTweets.$el\n          .find('.fetch-more')\n          .replaceWith('<b>No more tweets!</b>');\n      }\n\n      if (data.length > 0) {\n        infiniteTweets.lastCreatedAt = data[data.length - 1].created_at;\n      }\n    });\n  }\n\n  insertTweet(data) {\n    this.feed.prepend(this.tweetElement(data));\n  }\n\n  insertTweets(data) { \n    this.feed.append(data.map(this.tweetElement));\n  }\n\n  tweetElement(tweet) {\n    const mentions = tweet.mentions.map(mention =>\n      `<li class='tweetee'>\n        <a href='/users/${mention.user.id}'>@${mention.user.username}</a>\n      </li>`).join('');\n\n    let elementString = `\n      <li>\n        <div class='tweet'>\n          <h3 class='tweeter'>\n            <a href='users/${tweet.user.id}'>@${tweet.user.username}</a></h3>\n          <p>${tweet['content']}</p>\n          <ul class='mentions'>\n            Mentions\n            ${mentions}\n          </ul>\n        </div>\n      </li>\n    `\n\n    return $(elementString);\n  }\n}\n\nmodule.exports = InfiniteTweets;","let APIUtil = require(\"./api_util\");\n\nclass TweetCompose {\n  constructor($el) {\n    this.$el = $($el);\n    this.$input = this.$el.find('textarea[name=tweet\\\\[content\\\\]]');\n    this.$mentionedUsers = this.$el.find('.mentioned-users');\n\n    this.$el.find('.add-mentioned-user').on(\"click\", (e) => this.addMentionedUser(e));\n    this.$el.on('click','a.remove-mentioned-user', (e) => this.removeMentionedUser(e));\n    this.$el.on(\"submit\", this.submit.bind(this));\n    this.$el.on(\"input\",\"textarea\", this.handleInput.bind(this));\n  }\n\n  addMentionedUser(event) {\n    event.preventDefault();\n\n    this.$mentionedUsers.append(this.newUserSelect());\n  }\n\n  removeMentionedUser(e) {\n    let div = e.currentTarget.parentNode;\n    div.remove();\n  }\n\n  newUserSelect() {\n    let users = window.users.map(user => \n      `<option value='${user.id}'>${user.username}</option>`)\n    .join('');\n    \n    let html = `\n      <div>\n        <p>@ </p>\n        <select name='tweet[mentioned_user_ids][]'>\n          ${users}\n        <select>\n        <a class='remove-mentioned-user' href='#'>Remove</a>\n      </div>\n    `\n\n    return $(html);\n  }\n\n  handleInput() {\n    let charUsed = this.$input.val().length;\n    let charLeft = 140 - charUsed;\n\n    this.$el.find('.char-left').text(`Characters Left: ${charLeft}`);\n\n  }\n\n  submit(event) {\n    event.preventDefault();\n    var formData = this.$el.serializeJSON();\n\n    this.$el.find(':input').prop('disabled', true);\n\n    APIUtil.createTweet(formData).then(tweet => this.handleSuccess(tweet));\n  }\n\n  clearInput() {\n    this.$input.val('');\n    this.$el.find(':input').prop('disabled', false);\n    this.$mentionedUsers.empty();\n    this.$el.find('.char-left').empty();\n  }\n\n  handleSuccess(data) {\n    const $feed = $(this.$el.data('tweets-ul'));\n    $feed.trigger('insert-tweet', data);\n\n    this.clearInput();\n  }\n}\n\nmodule.exports = TweetCompose;","const FollowToggle = require(\"../../solution/frontend/follow_toggle\");\nconst APIUtil = require(\"./api_util\");\n\nclass UsersSearch {\n  constructor($el) {\n    this.$el = $($el);\n    this.input = $(this.$el.find('input'));\n    this.ul = $(this.$el.find('ul.users'));\n    this.input.on('input',(e) => {\n      this.handleInput(e);\n    });\n  }\n\n  handleInput(e) {\n    if(this.input.val == '') {\n      this.renderResults([]);\n      return;\n    }\n    APIUtil.searchUsers(this.input.val()).then(users => this.renderResults(users));\n  }\n\n  renderResults(results) {\n    this.ul.empty();\n\n    for (let i=0;i<results.length;i++) {\n      let result = results[i];\n\n      let $newResult = $(`<li><a href=\"/users/${result.id}\">@${result.username}</a></li>`);\n      let $followToggle = $('<button></button>');\n      let toggle = new FollowToggle($followToggle, {\n        userId: result.id,\n        followState: result.followed ? 'followed' : 'unfollowed'\n      });\n\n      $newResult.append($followToggle);\n      $(this.ul).append($newResult);\n    }\n  }\n}\n\nmodule.exports = UsersSearch;","const APIUtil = {\n\n  followUser: id => APIUtil.changeFollowStatus(id, 'POST'),\n\n  unfollowUser: id => APIUtil.changeFollowStatus(id, 'DELETE'),\n\n  changeFollowStatus: (id, method) => (\n    $.ajax({\n      url: `/users/${id}/follow`,\n      dataType: 'json',\n      method\n    })\n  ),\n\n  searchUsers: query => (\n    $.ajax({\n      url: '/users/search',\n      dataType: 'json',\n      method: 'GET',\n      data: { query }\n    })\n  ),\n\n  createTweet: data => (\n    $.ajax({\n      url: '/tweets',\n      method: 'POST',\n      dataType: 'json',\n      data\n    })\n  ),\n\n  fetchTweets: data => (\n    $.ajax({\n      url: '/feed',\n      method: 'GET',\n      dataType: 'json',\n      data\n    })\n  )\n};\n\nmodule.exports = APIUtil;\n","const APIUtil = require('./api_util');\n\nclass FollowToggle {\n  constructor(el, options) {\n    this.$el = $(el);\n    this.userId = this.$el.data('user-id') || options.userId;\n    this.followState = (this.$el.data('initial-follow-state') ||\n                        options.followState);\n    this.render();\n\n    this.$el.on('click', this.handleClick.bind(this));\n  }\n\n  handleClick(event) {\n    const followToggle = this;\n\n    event.preventDefault();\n\n    if (this.followState === 'followed') {\n      this.followState = 'unfollowing';\n      this.render();\n      APIUtil.unfollowUser(this.userId).then(() => {\n        followToggle.followState = 'unfollowed';\n        followToggle.render();\n      });\n    } else if (this.followState === 'unfollowed') {\n      this.followState = 'following';\n      this.render();\n      APIUtil.followUser(this.userId).then(() => {\n        followToggle.followState = 'followed';\n        followToggle.render();\n      });\n    }\n  }\n\n  render() {\n    switch (this.followState) {\n      case 'followed':\n        this.$el.prop('disabled', false);\n        this.$el.html('Unfollow!');\n        break;\n      case 'unfollowed':\n        this.$el.prop('disabled', false);\n        this.$el.html('Follow!');\n        break;\n      case 'following':\n        this.$el.prop('disabled', true);\n        this.$el.html('Following...');\n        break;\n      case 'unfollowing':\n        this.$el.prop('disabled', true);\n        this.$el.html('Unfollowing...');\n        break;\n    }\n  }\n}\n\nmodule.exports = FollowToggle;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","let FollowToggle = require(\"./follow_toggle\");\nlet TweetCompose = require(\"./tweet_compose\");\nlet UsersSearch = require(\"./users-search\");\nlet InfiteTweets = require(\"./infinite_tweets\");\nconst APIUtil = require(\"../../solution/frontend/api_util\");\n\n$(() => {\n  $(\"button.follow-toggle\").each((i, fT)=> new FollowToggle(fT, {}));\n  $(\"nav.users-search\").each((i, uS) => new UsersSearch(uS));\n  $(\"form.tweet-compose\").each((i, tC) => new TweetCompose(tC));\n  $(\"div.infinite-tweets\").each((i, iT) => new InfiteTweets(iT));\n});"],"sourceRoot":""}